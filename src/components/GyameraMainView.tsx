/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useCallback, useEffect, useState } from "react";
import { useLocalStorage } from "@/hooks/localStorage";
import { getVideoFrameAsDataUrl } from "@/lib/getVideoFrameAsDataUrl";
import { loadExactCameraToVideoElement } from "@/lib/loadExactCameraToVideoElement";
import { getRandomCamera } from "@/lib/getRandomCamera";
import { GyazoUserInfo } from "@/components/GyazoUserInfo";
import { GyazoCollectionSelector } from "@/components/GyazoCollectionSelector";
import { uploadToGyazo } from "@/lib/uploadToGyazo";
import { GyazoCollectionImages } from "./GyazoCollectionImages";

export const GyameraMainView: React.FC = () => {
  const [lastCameraDeviceId, setLastCameraDeviceId] = useLocalStorage(
    "gyamera-last-camera-device-id",
    ""
  );

  const [lastCollectionId, setLastCollectionId] = useLocalStorage(
    "gyamera-last-collection-id",
    ""
  );

  const [lastGyazoImageUrl, setLastGyazoImageUrl] = useState<
    string | undefined
  >();

  const [uploadingToGyazo, setUploadingToGyazo] = useState(false);

  useEffect(() => {
    const load = async () => {
      const video = document.getElementById("video") as HTMLVideoElement;
      if (lastCameraDeviceId.length > 0) {
        await loadExactCameraToVideoElement(lastCameraDeviceId, video);
      } else {
        const camera = await getRandomCamera();
        if (camera.deviceId.length > 0) {
          await loadExactCameraToVideoElement(camera.deviceId, video);
          setLastCameraDeviceId(camera.deviceId);
        }
      }
    };
    load();
  }, [lastCameraDeviceId, setLastCameraDeviceId]);

  const loadRandomCamera = useCallback(async () => {
    const video = document.getElementById("video") as HTMLVideoElement;
    const camera = await getRandomCamera();
    setLastCameraDeviceId(camera.deviceId);
    await loadExactCameraToVideoElement(camera.deviceId, video);
  }, [setLastCameraDeviceId]);

  const onChangeCollection = useCallback(
    (collectionId: string) => {
      setLastCollectionId(collectionId);
    },
    [setLastCollectionId]
  );

  const takePhoto = useCallback(
    async (e: React.MouseEvent) => {
      e.preventDefault();
      if (uploadingToGyazo) {
        return;
      }
      if (lastCollectionId.length === 0) {
        alert("Select Gyazo collection");
        return;
      }
      setUploadingToGyazo(true);
      const video = document.getElementById("video") as HTMLVideoElement;
      const newImageDataUrl = getVideoFrameAsDataUrl(video);
      if (newImageDataUrl === undefined) {
        return;
      }
      console.info(newImageDataUrl.length);
      const res = await uploadToGyazo(newImageDataUrl, lastCollectionId);
      const json = await res.json();
      setLastGyazoImageUrl(json.url);
      setUploadingToGyazo(false);
    },
    [lastCollectionId, uploadingToGyazo]
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <GyazoUserInfo />
        <div>
          <div className="cameraWrap" style={{ textAlign: "center" }}>
            <video
              id="video"
              onClick={loadRandomCamera}
              style={{ maxWidth: "100vw" }}
            >
              Video stream not available.
            </video>
          </div>
          <div
            className="takePhotoWrap"
            style={{ maxWidth: "100vw", maxHeight: "80vh" }}
          >
            <GyazoCollectionSelector
              lastCollectionId={lastCollectionId}
              onChangeCollection={onChangeCollection}
            />
            <div
              style={{
                width: "100vw",
                marginTop: "15px",
                marginBottom: "15px",
              }}
            >
              <button
                id="takePhoto"
                onClick={takePhoto}
                disabled={uploadingToGyazo && lastCollectionId.length === 0}
                style={{ fontSize: "2em", width: "100%" }}
              >
                Gyazo!
              </button>
            </div>
          </div>
          <hr />
          <div className="outputWrap" style={{ marginTop: "15px" }}>
            {uploadingToGyazo && <span>Uploading...</span>}
            {lastCollectionId && (
              <>
                <a
                  href={`https://gyazo.com/collections/${lastCollectionId}`}
                  target="_blank"
                >
                  <GyazoCollectionImages collectionId={lastCollectionId} />
                </a>
              </>
            )}
          </div>
        </div>
      </main>
    </>
  );
};
